package controllers

import (
	"appengine"
	"appengine/datastore"
	"appengine/user"
	"lib/gorilla/mux"
	"log"
	"models"
	"net/http"
	"strconv"
)

// GET returns a new simulation which the current user is made owner of (if logged in)
// POST saves the simulation and redirects to simulator/{simulatorId}
// Renders the simulator.html page 
func NewSimulatorHandler(w http.ResponseWriter, r *http.Request) {

	c := appengine.NewContext(r)
	u := user.Current(c)
	var simulation models.Simulation

	if r.Method == "GET" {

		if u != nil { // Logged In
			simulation = models.Simulation{Name: "", UserID: u.ID, Contents: "{}"}
		} else { // Not Logged In
			simulation = models.Simulation{Name: "", UserID: "", Contents: "{}"}
		}

	} else if r.Method == "POST" {

		// Create the simulation object
		simulation = models.Simulation{Name: r.FormValue("Name"), UserID: u.ID, Contents: r.FormValue("Contents")}

		// Give it a new incomplete key
		// Datastore will define a simulation id for us
		key := datastore.NewIncompleteKey(c, "Simulation", nil)

		// Put the simulation in the datastore and retrieve the now complete key in result
		result, err := datastore.Put(c, key, &simulation)

		if err != nil {
			errorHandler(w, "Could not save new simulation: " + err.Error(), http.StatusInternalServerError)
			return
		}

		// Grab the simulation id from the result key generated by the put
		// this should never fail....
		simId := strconv.FormatInt(result.IntID(), 10)

		// an AJAX Request would prevent a redirect..
		http.Redirect(w, r, "/simulator/"+simId, http.StatusFound)

		return

	}

	// If it's a new simulation, you're the owner
	data := map[string]interface{}{
		"sim":     simulation,
		"isOwner": true,
	}

	baseHandler(w, r, "simulator", data)

}

// GET returns simulation as specified by the simulatorId passed in the url
// POST saves the simulation as specified by the simulatorId passed in the url
// Renders the simulator.html page 
func EditSimulatorHandler(w http.ResponseWriter, r *http.Request) {

	vars := mux.Vars(r)
	simId := vars["simulatorId"]
	c := appengine.NewContext(r)
	u := user.Current(c)
	var simulation models.Simulation

	if r.Method == "GET" {

		// Existing Simulation
		id := StringToInt64(simId)

		// Construct the simulations key
		k := datastore.NewKey(c, "Simulation", "", id, nil)

		if err := datastore.Get(c, k, &simulation); err != nil {
			errorHandler(w, "Simulation was not found: " + err.Error(), http.StatusInternalServerError)
			return
		}

	} else if r.Method == "POST" {

		// Posting existing simulation to datastore
		id := StringToInt64(simId)

		// Construct the simulations key
		key := datastore.NewKey(c, "Simulation", "", id, nil)

		// Update simulation contents
		simulation = models.Simulation{Name: r.FormValue("Name"), UserID: u.ID, Contents: r.FormValue("Contents")}

		// Put the simulation in the datastore
		_, err := datastore.Put(c, key, &simulation)

		if err != nil {
			// Could not place the simulation in the datastore
			errorHandler(w, "Could not save existing simulation: " + err.Error(), http.StatusInternalServerError)
			return
		}

	}

	simulation.Id = StringToInt64(simId)

	data := map[string]interface{}{
		"sim":     simulation,
		"isOwner": isOwner(simulation.UserID, u),
	}

	baseHandler(w, r, "simulator", data)

}

// Returns all simulations tied to the user id passed in the url
// Renders the mySimulations.html page
func UserSimulatorHandler(w http.ResponseWriter, r *http.Request) {

	if r.Method == "GET" {
		// Grab the userId
		vars := mux.Vars(r)
		userId := vars["userId"]

		// Get the current context
		c := appengine.NewContext(r)

		// FUTURE TODO: Only show public simulations?
		q := datastore.NewQuery("Simulation").Filter("UserID =", userId)
		simulations := make([]models.Simulation, 0, 10)

		keys, err := q.GetAll(c, &simulations)

		if err != nil {
			errorHandler(w, "Could not load user simulations: " + err.Error(), http.StatusInternalServerError)
			return
		}

		for i := 0; i < len(simulations); i++ {
			simulations[i].Id = keys[i].IntID()
		}

		data := map[string]interface{}{
			"sims": simulations,
		}

		baseHandler(w, r, "userSimulations", data)
	}

}

// Returns every simulation saved in the datastore
// Renders the allSimulations.html page
func AllSimulatorHandler(w http.ResponseWriter, r *http.Request) {

	if r.Method == "GET" {

		c := appengine.NewContext(r)
		q := datastore.NewQuery("Simulation").Order("-Name")
		simulations := make([]models.Simulation, 0, 10)

		keys, err := q.GetAll(c, &simulations)

		if err != nil {
			// TODO: Make a pretty 500 page
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}

		for i := 0; i < len(simulations); i++ {
			simulations[i].Id = keys[i].IntID()
		}

		data := map[string]interface{}{
			"sims": simulations,
		}

		baseHandler(w, r, "allSimulations", data)

	}

}

// Converts a string to int64
func StringToInt64(s string) int64 {

	result, dontcare := strconv.ParseInt(s, 10, 64)

	if dontcare != nil {
		log.Println(dontcare.Error())
	}

	return result

}

// Returns true if the user.ID and simUserId are equivalent
func isOwner(simUserId string, u *user.User) bool {

	if u == nil {
		return false
	}

	return simUserId == u.ID

}
